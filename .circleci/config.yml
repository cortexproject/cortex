version: 2.1

# https://circleci.com/blog/circleci-hacks-reuse-yaml-in-your-circleci-config-with-yaml/
defaults: &defaults
  docker:
    # IMPORTANT: whenever you change the build-image version tag, remember to replace it
    #            across the entire file (there are multiple references).
    - image: quay.io/cortexproject/build-image:update-build-image-ce3bc5f86
  working_directory: /go/src/github.com/cortexproject/cortex

filters: &filters
  filters:
    tags:
      only: /^v[0-9]+(\.[0-9]+){2}(-.+|[^-.]*)$/

workflows:
  version: 2
  test-build-deploy:
    # You must specify a tag filter for each job that deploy depends on.
    jobs:
    - lint:
        <<: *filters
    - test:
        <<: *filters
    - integration:
        requires:
        - build
        <<: *filters
    - integration-configs-db:
        requires:
        - build
        <<: *filters
    - build:
        <<: *filters
    - deploy_website:
        requires:
        - test
        - build
        filters:
          branches:
            only: master
    - deploy:
        requires:
        - build
        - test
        - lint
        - integration
        - integration-configs-db
        filters:
          branches:
            only: master
          tags:
            only: /^v[0-9]+(\.[0-9]+){2}(-.+|[^-.]*)$/

commands:
  install-docker:
    steps:
    - run:
        name: Install Docker client
        command: |
          set -x
          VER="17.03.0-ce"
          curl -L -o /tmp/docker-$VER.tgz https://download.docker.com/linux/static/stable/x86_64/docker-$VER.tgz
          tar -xz -C /tmp -f /tmp/docker-$VER.tgz
          mv /tmp/docker/* /usr/bin

jobs:
  lint:
    <<: *defaults
    steps:
    - checkout
    - run:
        name: Lint
        command: make BUILD_IN_CONTAINER=false lint
    - run:
        name: Check vendor directory is consistent.
        command: make BUILD_IN_CONTAINER=false mod-check
    - run:
        name: Check protos are consistent.
        command: make BUILD_IN_CONTAINER=false check-protos
    - run:
        name: Check generated documentation is consistent.
        command: make BUILD_IN_CONTAINER=false check-doc
    - run:
        name: Check white noise.
        command: make BUILD_IN_CONTAINER=false check-white-noise

  test:
    docker:
      - image: quay.io/cortexproject/build-image:update-build-image-ce3bc5f86
      - image: cassandra:3.11
        environment:
          JVM_OPTS: "-Xms1024M -Xmx1024M"
    working_directory: /go/src/github.com/cortexproject/cortex
    steps:
    - checkout
    - run:
        name: Test
        command: CASSANDRA_TEST_ADDRESSES=localhost:9042 make BUILD_IN_CONTAINER=false test

  integration-configs-db:
    machine:
      image: ubuntu-1604:201903-01

    working_directory: ~/src/github.com/cortexproject/cortex
    steps:
    - checkout
    - restore_cache:
        key: v1-cortex-{{ .Branch }}-{{ .Revision }}
    - run:
        name: Integration Test
        command: |
          touch build-image/.uptodate
          MIGRATIONS_DIR=$(pwd)/cmd/cortex/migrations make BUILD_IMAGE=quay.io/cortexproject/build-image:update-build-image-ce3bc5f86 configs-integration-test

  integration:
    machine:
      image: ubuntu-1604:201903-01

    # Make sure the working directory is within the GOPATH, otherwise
    # "go test" will not download module dependencies.
    working_directory: ~/.go_workspace/src/github.com/cortexproject/cortex
    steps:
    - run:
        name: Upgrade golang
        command: |
          cd /tmp && \
          wget https://dl.google.com/go/go1.14.4.linux-amd64.tar.gz && \
          tar -zxvf go1.14.4.linux-amd64.tar.gz && \
          sudo rm -fr /usr/local/go && \
          sudo mv /tmp/go /usr/local/go && \
          cd -
    - checkout
    - restore_cache:
        key: v1-cortex-{{ .Branch }}-{{ .Revision }}
    - run:
        name: Load Images
        command: ln -s /tmp/images ./docker-images; make BUILD_IN_CONTAINER=false load-images
    - run:
        name: Preload Docker Images
        # We download docker images used by integration tests so that all images are available
        # locally and the download time doesn't account in the test execution time, which is subject
        # to a timeout.
        command: |
          docker pull minio/minio:RELEASE.2019-12-30T05-45-39Z
          docker pull amazon/dynamodb-local:1.11.477
          docker pull consul:0.9
          docker pull gcr.io/etcd-development/etcd:v3.4.7
          docker pull quay.io/cortexproject/cortex:v0.6.0
          docker pull quay.io/cortexproject/cortex:v0.7.0
          docker pull quay.io/cortexproject/cortex:v1.0.0
          docker pull quay.io/cortexproject/cortex:v1.1.0
          docker pull shopify/bigtable-emulator:0.1.0
          docker pull rinscy/cassandra:3.11.0
          docker pull memcached:1.6.1
          docker pull bouncestorage/swift-aio:55ba4331
    - run:
        name: Integration Tests
        command: |
          export CORTEX_IMAGE_PREFIX="${IMAGE_PREFIX:-quay.io/cortexproject/}"
          export CORTEX_IMAGE="${CORTEX_IMAGE_PREFIX}cortex:${CIRCLE_TAG:-$(./tools/image-tag)}"
          export CORTEX_CHECKOUT_DIR="/home/circleci/.go_workspace/src/github.com/cortexproject/cortex"
          echo "Running integration tests with image: $CORTEX_IMAGE"
          go test -tags=requires_docker -timeout 1200s -v -count=1 ./integration/...
        no_output_timeout: 20m

  build:
    <<: *defaults
    steps:
    - checkout
    - setup_remote_docker
    - install-docker

    - run:
        name: Build
        command: |
          touch build-image/.uptodate
          make BUILD_IN_CONTAINER=false
    - run:
        name: Build Website
        command: |
          touch build-image/.uptodate
          make BUILD_IN_CONTAINER=false web-build

    - persist_to_workspace:
        root: .
        paths:
          - website/public/

    - store_artifacts:
        path: pkg/querier/frontend/frontend.pb.go
    - store_artifacts:
        path: pkg/chunk/storage/caching_index_client.pb.go
    - store_artifacts:
        path: pkg/ring/ring.pb.go
    - store_artifacts:
        path: pkg/ingester/client/cortex.pb.go
    - store_artifacts:
        path: pkg/ruler/rules/rules.pb.go

    - run:
        name: Save Images
        command: |
          mkdir /tmp/images
          ln -s /tmp/images ./docker-images
          make BUILD_IN_CONTAINER=false save-images

    - save_cache:
        key: v1-cortex-{{ .Branch }}-{{ .Revision }}
        paths:
        - /tmp/images/

  deploy_website:
    <<: *defaults
    steps:
    - add_ssh_keys:
        fingerprints:
        - "72:f2:e3:39:18:1f:95:17:90:b3:37:5e:49:ed:7e:a3"
    - checkout
    - attach_workspace:
        at: .
    - run:
        name: deploy-website
        command: make BUILD_IN_CONTAINER=false web-deploy

  deploy:
    <<: *defaults
    steps:
    - checkout
    - setup_remote_docker
    - install-docker

    - restore_cache:
        key: v1-cortex-{{ .Branch }}-{{ .Revision }}

    - run:
        name: Load Images
        command: ln -s /tmp/images ./docker-images; make BUILD_IN_CONTAINER=false load-images

    - run:
        name: Deploy
        command: |
          if [ -n "$DOCKER_REGISTRY_PASSWORD" ]; then
            docker login -u "$DOCKER_REGISTRY_USER" -p "$DOCKER_REGISTRY_PASSWORD"
          fi
          if [ -n "$QUAY_PASSWORD" ]; then
            docker login -u "$QUAY_USER" -p "$QUAY_PASSWORD" quay.io;
          fi
          IMAGE_TAG=$CIRCLE_TAG ./push-images $NOQUAY
