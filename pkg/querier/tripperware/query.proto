syntax = "proto3";

package tripperware;

option go_package = "tripperware";

import "gogoproto/gogo.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/any.proto";
import "github.com/cortexproject/cortex/pkg/cortexpb/cortex.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;

message PrometheusResponse {
  string Status = 1 [(gogoproto.jsontag) = "status"];
  PrometheusData Data = 2 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "data,omitempty"];
  string ErrorType = 3 [(gogoproto.jsontag) = "errorType,omitempty"];
  string Error = 4 [(gogoproto.jsontag) = "error,omitempty"];
  repeated tripperware.PrometheusResponseHeader Headers = 5 [(gogoproto.jsontag) = "-"];
  repeated string Warnings = 6 [(gogoproto.jsontag) = "warnings,omitempty"];
  repeated string Infos = 7 [(gogoproto.jsontag) = "infos,omitempty"];
}

message PrometheusData {
  string ResultType = 1 [(gogoproto.jsontag) = "resultType"];
  tripperware.PrometheusQueryResult Result = 2 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "result"];
  tripperware.PrometheusResponseStats stats = 3 [(gogoproto.jsontag) = "stats,omitempty"];
}

message CachedResponse  {
  string key = 1 [(gogoproto.jsontag) = "key"];

  // List of cached responses; non-overlapping and in order.
  repeated Extent extents = 2 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "extents"];
}

message Extent  {
  int64 start = 1 [(gogoproto.jsontag) = "start"];
  int64 end = 2 [(gogoproto.jsontag) = "end"];
  // reserved the previous key to ensure cache transition
  reserved 3;
  string trace_id = 4 [(gogoproto.jsontag) = "-"];
  google.protobuf.Any response = 5 [(gogoproto.jsontag) = "response"];
}

message SampleStream {
  repeated cortexpb.LabelPair labels = 1 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "metric"];
  repeated cortexpb.Sample samples = 2 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "values"];
  repeated SampleHistogramPair histograms = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "histograms"];
}

message SampleHistogramPair {
  int64 timestamp_ms = 1;
  SampleHistogram histogram = 2 [(gogoproto.nullable) = false];
}

message SampleHistogram {
  double count = 1;
  double sum = 2;
  repeated HistogramBucket buckets = 3;
}

message HistogramBucket {
  int32 boundaries = 1;
  double lower = 2;
  double upper = 3;
  double count = 4;
}

message PrometheusResponseStats {
  PrometheusResponseSamplesStats samples = 1 [(gogoproto.jsontag) = "samples"];
}

message PrometheusResponseSamplesStats {
  int64 totalQueryableSamples = 1 [(gogoproto.jsontag) = "totalQueryableSamples"];
  repeated PrometheusResponseQueryableSamplesStatsPerStep totalQueryableSamplesPerStep = 2 [(gogoproto.jsontag) = "totalQueryableSamplesPerStep"];
  int64 peakSamples = 3 [(gogoproto.jsontag) = "peakSamples"];
}

message PrometheusResponseQueryableSamplesStatsPerStep {
  int64 value       = 1;
  int64 timestamp_ms = 2;
}

message PrometheusResponseHeader {
  string Name = 1 [(gogoproto.jsontag) = "-"];
  repeated string Values = 2 [(gogoproto.jsontag) = "-"];
}

message PrometheusQueryResult {
  oneof result {
    Vector vector = 1;
    bytes rawBytes = 2;
    Matrix matrix = 3;
  }
}

message Vector {
  repeated Sample samples = 1 [(gogoproto.nullable) = false];
}

message Sample {
  repeated cortexpb.LabelPair labels = 1 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "metric"];
  cortexpb.Sample sample = 2 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "value"];
  SampleHistogramPair histogram = 3 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "histogram"];
  // Full representation of a native histogram and it should be always float histogram type.
  // This field should be never deserialized into JSON and should only exist in protobuf format.
  cortexpb.Histogram rawHistogram = 4 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "-"];
}

message Matrix {
  repeated SampleStream sampleStreams = 1 [(gogoproto.nullable) = false];
}
