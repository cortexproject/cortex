// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: instantquery.proto

package instantquery

import (
	bytes "bytes"
	fmt "fmt"
	cortexpb "github.com/cortexproject/cortex/pkg/cortexpb"
	github_com_cortexproject_cortex_pkg_cortexpb "github.com/cortexproject/cortex/pkg/cortexpb"
	tripperware "github.com/cortexproject/cortex/pkg/querier/tripperware"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PrometheusInstantQueryResponse struct {
	Status    string                                  `protobuf:"bytes,1,opt,name=Status,proto3" json:"status"`
	Data      PrometheusInstantQueryData              `protobuf:"bytes,2,opt,name=Data,proto3" json:"data,omitempty"`
	ErrorType string                                  `protobuf:"bytes,3,opt,name=ErrorType,proto3" json:"errorType,omitempty"`
	Error     string                                  `protobuf:"bytes,4,opt,name=Error,proto3" json:"error,omitempty"`
	Headers   []*tripperware.PrometheusResponseHeader `protobuf:"bytes,5,rep,name=Headers,proto3" json:"-"`
}

func (m *PrometheusInstantQueryResponse) Reset()      { *m = PrometheusInstantQueryResponse{} }
func (*PrometheusInstantQueryResponse) ProtoMessage() {}
func (*PrometheusInstantQueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2ce36475a368033, []int{0}
}
func (m *PrometheusInstantQueryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrometheusInstantQueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrometheusInstantQueryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrometheusInstantQueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrometheusInstantQueryResponse.Merge(m, src)
}
func (m *PrometheusInstantQueryResponse) XXX_Size() int {
	return m.Size()
}
func (m *PrometheusInstantQueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PrometheusInstantQueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PrometheusInstantQueryResponse proto.InternalMessageInfo

func (m *PrometheusInstantQueryResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *PrometheusInstantQueryResponse) GetData() PrometheusInstantQueryData {
	if m != nil {
		return m.Data
	}
	return PrometheusInstantQueryData{}
}

func (m *PrometheusInstantQueryResponse) GetErrorType() string {
	if m != nil {
		return m.ErrorType
	}
	return ""
}

func (m *PrometheusInstantQueryResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *PrometheusInstantQueryResponse) GetHeaders() []*tripperware.PrometheusResponseHeader {
	if m != nil {
		return m.Headers
	}
	return nil
}

type PrometheusInstantQueryData struct {
	ResultType string                               `protobuf:"bytes,1,opt,name=ResultType,proto3" json:"resultType"`
	Result     PrometheusInstantQueryResult         `protobuf:"bytes,2,opt,name=Result,proto3" json:"result"`
	Stats      *tripperware.PrometheusResponseStats `protobuf:"bytes,3,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (m *PrometheusInstantQueryData) Reset()      { *m = PrometheusInstantQueryData{} }
func (*PrometheusInstantQueryData) ProtoMessage() {}
func (*PrometheusInstantQueryData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2ce36475a368033, []int{1}
}
func (m *PrometheusInstantQueryData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrometheusInstantQueryData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrometheusInstantQueryData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrometheusInstantQueryData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrometheusInstantQueryData.Merge(m, src)
}
func (m *PrometheusInstantQueryData) XXX_Size() int {
	return m.Size()
}
func (m *PrometheusInstantQueryData) XXX_DiscardUnknown() {
	xxx_messageInfo_PrometheusInstantQueryData.DiscardUnknown(m)
}

var xxx_messageInfo_PrometheusInstantQueryData proto.InternalMessageInfo

func (m *PrometheusInstantQueryData) GetResultType() string {
	if m != nil {
		return m.ResultType
	}
	return ""
}

func (m *PrometheusInstantQueryData) GetResult() PrometheusInstantQueryResult {
	if m != nil {
		return m.Result
	}
	return PrometheusInstantQueryResult{}
}

func (m *PrometheusInstantQueryData) GetStats() *tripperware.PrometheusResponseStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

type PrometheusInstantQueryResult struct {
	// Types that are valid to be assigned to Result:
	//	*PrometheusInstantQueryResult_Vector
	//	*PrometheusInstantQueryResult_RawBytes
	//	*PrometheusInstantQueryResult_Matrix
	Result isPrometheusInstantQueryResult_Result `protobuf_oneof:"result"`
}

func (m *PrometheusInstantQueryResult) Reset()      { *m = PrometheusInstantQueryResult{} }
func (*PrometheusInstantQueryResult) ProtoMessage() {}
func (*PrometheusInstantQueryResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2ce36475a368033, []int{2}
}
func (m *PrometheusInstantQueryResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrometheusInstantQueryResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrometheusInstantQueryResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrometheusInstantQueryResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrometheusInstantQueryResult.Merge(m, src)
}
func (m *PrometheusInstantQueryResult) XXX_Size() int {
	return m.Size()
}
func (m *PrometheusInstantQueryResult) XXX_DiscardUnknown() {
	xxx_messageInfo_PrometheusInstantQueryResult.DiscardUnknown(m)
}

var xxx_messageInfo_PrometheusInstantQueryResult proto.InternalMessageInfo

type isPrometheusInstantQueryResult_Result interface {
	isPrometheusInstantQueryResult_Result()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type PrometheusInstantQueryResult_Vector struct {
	Vector *Vector `protobuf:"bytes,1,opt,name=vector,proto3,oneof"`
}
type PrometheusInstantQueryResult_RawBytes struct {
	RawBytes []byte `protobuf:"bytes,2,opt,name=rawBytes,proto3,oneof"`
}
type PrometheusInstantQueryResult_Matrix struct {
	Matrix *Matrix `protobuf:"bytes,3,opt,name=matrix,proto3,oneof"`
}

func (*PrometheusInstantQueryResult_Vector) isPrometheusInstantQueryResult_Result()   {}
func (*PrometheusInstantQueryResult_RawBytes) isPrometheusInstantQueryResult_Result() {}
func (*PrometheusInstantQueryResult_Matrix) isPrometheusInstantQueryResult_Result()   {}

func (m *PrometheusInstantQueryResult) GetResult() isPrometheusInstantQueryResult_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *PrometheusInstantQueryResult) GetVector() *Vector {
	if x, ok := m.GetResult().(*PrometheusInstantQueryResult_Vector); ok {
		return x.Vector
	}
	return nil
}

func (m *PrometheusInstantQueryResult) GetRawBytes() []byte {
	if x, ok := m.GetResult().(*PrometheusInstantQueryResult_RawBytes); ok {
		return x.RawBytes
	}
	return nil
}

func (m *PrometheusInstantQueryResult) GetMatrix() *Matrix {
	if x, ok := m.GetResult().(*PrometheusInstantQueryResult_Matrix); ok {
		return x.Matrix
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PrometheusInstantQueryResult) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PrometheusInstantQueryResult_Vector)(nil),
		(*PrometheusInstantQueryResult_RawBytes)(nil),
		(*PrometheusInstantQueryResult_Matrix)(nil),
	}
}

type Vector struct {
	Samples []*Sample `protobuf:"bytes,1,rep,name=samples,proto3" json:"samples,omitempty"`
}

func (m *Vector) Reset()      { *m = Vector{} }
func (*Vector) ProtoMessage() {}
func (*Vector) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2ce36475a368033, []int{3}
}
func (m *Vector) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vector.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector.Merge(m, src)
}
func (m *Vector) XXX_Size() int {
	return m.Size()
}
func (m *Vector) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector.DiscardUnknown(m)
}

var xxx_messageInfo_Vector proto.InternalMessageInfo

func (m *Vector) GetSamples() []*Sample {
	if m != nil {
		return m.Samples
	}
	return nil
}

type Sample struct {
	Labels []github_com_cortexproject_cortex_pkg_cortexpb.LabelAdapter `protobuf:"bytes,1,rep,name=labels,proto3,customtype=github.com/cortexproject/cortex/pkg/cortexpb.LabelAdapter" json:"metric"`
	Sample cortexpb.Sample                                             `protobuf:"bytes,2,opt,name=sample,proto3" json:"value"`
}

func (m *Sample) Reset()      { *m = Sample{} }
func (*Sample) ProtoMessage() {}
func (*Sample) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2ce36475a368033, []int{4}
}
func (m *Sample) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Sample) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Sample.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Sample) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sample.Merge(m, src)
}
func (m *Sample) XXX_Size() int {
	return m.Size()
}
func (m *Sample) XXX_DiscardUnknown() {
	xxx_messageInfo_Sample.DiscardUnknown(m)
}

var xxx_messageInfo_Sample proto.InternalMessageInfo

func (m *Sample) GetSample() cortexpb.Sample {
	if m != nil {
		return m.Sample
	}
	return cortexpb.Sample{}
}

type Matrix struct {
	SampleStreams []tripperware.SampleStream `protobuf:"bytes,1,rep,name=sampleStreams,proto3" json:"sampleStreams"`
}

func (m *Matrix) Reset()      { *m = Matrix{} }
func (*Matrix) ProtoMessage() {}
func (*Matrix) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2ce36475a368033, []int{5}
}
func (m *Matrix) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Matrix) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Matrix.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Matrix) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Matrix.Merge(m, src)
}
func (m *Matrix) XXX_Size() int {
	return m.Size()
}
func (m *Matrix) XXX_DiscardUnknown() {
	xxx_messageInfo_Matrix.DiscardUnknown(m)
}

var xxx_messageInfo_Matrix proto.InternalMessageInfo

func (m *Matrix) GetSampleStreams() []tripperware.SampleStream {
	if m != nil {
		return m.SampleStreams
	}
	return nil
}

func init() {
	proto.RegisterType((*PrometheusInstantQueryResponse)(nil), "instantquery.PrometheusInstantQueryResponse")
	proto.RegisterType((*PrometheusInstantQueryData)(nil), "instantquery.PrometheusInstantQueryData")
	proto.RegisterType((*PrometheusInstantQueryResult)(nil), "instantquery.PrometheusInstantQueryResult")
	proto.RegisterType((*Vector)(nil), "instantquery.Vector")
	proto.RegisterType((*Sample)(nil), "instantquery.Sample")
	proto.RegisterType((*Matrix)(nil), "instantquery.Matrix")
}

func init() { proto.RegisterFile("instantquery.proto", fileDescriptor_d2ce36475a368033) }

var fileDescriptor_d2ce36475a368033 = []byte{
	// 652 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcf, 0x4f, 0xd4, 0x40,
	0x14, 0xee, 0x00, 0x5b, 0xe0, 0x2d, 0xa0, 0x19, 0x88, 0xae, 0x84, 0x4c, 0x49, 0xa3, 0xc9, 0x6a,
	0xb4, 0x9b, 0xac, 0x31, 0xea, 0xd1, 0x2a, 0x06, 0xa3, 0x06, 0x9c, 0x25, 0x1e, 0xbc, 0xcd, 0x2e,
	0x93, 0xa5, 0xba, 0xa5, 0x75, 0x3a, 0x0b, 0xec, 0xcd, 0x3f, 0xc1, 0xbf, 0xc2, 0xf8, 0x3f, 0x78,
	0xf5, 0xc0, 0x91, 0x23, 0xf1, 0xd0, 0x48, 0xb9, 0x98, 0x3d, 0xe1, 0x7f, 0x60, 0x3a, 0x33, 0x85,
	0xae, 0x3f, 0xf1, 0xd6, 0x7e, 0xef, 0xfb, 0xbe, 0xf7, 0xde, 0x37, 0xd3, 0x02, 0x0e, 0xb6, 0x13,
	0xc9, 0xb6, 0xe5, 0xdb, 0x3e, 0x17, 0x03, 0x2f, 0x16, 0x91, 0x8c, 0xf0, 0x4c, 0x19, 0x5b, 0x5c,
	0xe8, 0x46, 0xdd, 0x48, 0x15, 0x1a, 0xf9, 0x93, 0xe6, 0x2c, 0xde, 0xef, 0x06, 0x72, 0xab, 0xdf,
	0xf6, 0x3a, 0x51, 0xd8, 0xe8, 0x44, 0x42, 0xf2, 0xbd, 0x58, 0x44, 0xaf, 0x79, 0x47, 0x9a, 0xb7,
	0x46, 0xfc, 0xa6, 0x5b, 0x14, 0xda, 0xe6, 0xc1, 0x48, 0x1f, 0x9e, 0x47, 0x9a, 0xf7, 0x0e, 0xb8,
	0x68, 0x48, 0x11, 0xc4, 0x31, 0x17, 0xbb, 0x4c, 0xf0, 0x46, 0x69, 0x46, 0xf7, 0xf3, 0x18, 0x90,
	0x75, 0x11, 0x85, 0x5c, 0x6e, 0xf1, 0x7e, 0xf2, 0x44, 0x0f, 0xfc, 0x22, 0x27, 0x50, 0x9e, 0xc4,
	0xd1, 0x76, 0xc2, 0xb1, 0x0b, 0x76, 0x4b, 0x32, 0xd9, 0x4f, 0x6a, 0x68, 0x19, 0xd5, 0xa7, 0x7d,
	0x18, 0xa6, 0x8e, 0x9d, 0x28, 0x84, 0x9a, 0x0a, 0xde, 0x80, 0x89, 0x47, 0x4c, 0xb2, 0xda, 0xd8,
	0x32, 0xaa, 0x57, 0x9b, 0x75, 0x6f, 0x24, 0x8d, 0xdf, 0xfb, 0xe7, 0x7c, 0xff, 0xd2, 0x7e, 0xea,
	0x58, 0xc3, 0xd4, 0x99, 0xdb, 0x64, 0x92, 0xdd, 0x8c, 0xc2, 0x40, 0xf2, 0x30, 0x96, 0x03, 0xaa,
	0xdc, 0xf0, 0x1d, 0x98, 0x5e, 0x11, 0x22, 0x12, 0x1b, 0x83, 0x98, 0xd7, 0xc6, 0x55, 0xf3, 0xcb,
	0xc3, 0xd4, 0x99, 0xe7, 0x05, 0x58, 0x52, 0x9c, 0x31, 0xf1, 0x75, 0xa8, 0xa8, 0x97, 0xda, 0x84,
	0x92, 0xcc, 0x0f, 0x53, 0xe7, 0x82, 0x92, 0x94, 0xe8, 0x9a, 0x81, 0x1f, 0xc3, 0xe4, 0x2a, 0x67,
	0x9b, 0x5c, 0x24, 0xb5, 0xca, 0xf2, 0x78, 0xbd, 0xda, 0xbc, 0xe6, 0x95, 0x92, 0x2a, 0x4d, 0x5e,
	0xa4, 0xa1, 0xd9, 0x7e, 0x65, 0x98, 0x3a, 0xe8, 0x16, 0x2d, 0xc4, 0xee, 0x77, 0x04, 0x8b, 0x7f,
	0x5e, 0x13, 0x7b, 0x00, 0x94, 0x27, 0xfd, 0x9e, 0x54, 0x9b, 0xe8, 0x18, 0xe7, 0x86, 0xa9, 0x03,
	0xe2, 0x14, 0xa5, 0x25, 0x06, 0xa6, 0x60, 0xeb, 0x37, 0x13, 0xe8, 0x8d, 0xf3, 0x04, 0xaa, 0x15,
	0xfe, 0x9c, 0x89, 0xd4, 0xd6, 0xde, 0xd4, 0x38, 0xe1, 0x35, 0xa8, 0xe4, 0x87, 0x96, 0xa8, 0x20,
	0xab, 0xcd, 0xab, 0xff, 0x58, 0x34, 0x3f, 0xd8, 0x44, 0x67, 0xa7, 0x64, 0xe5, 0xec, 0x14, 0xe0,
	0x7e, 0x40, 0xb0, 0xf4, 0xb7, 0x49, 0xb0, 0x07, 0xf6, 0x0e, 0xef, 0xc8, 0x48, 0xa8, 0x8d, 0xab,
	0xcd, 0x85, 0xd1, 0x2d, 0x5e, 0xaa, 0xda, 0xaa, 0x45, 0x0d, 0x0b, 0x2f, 0xc1, 0x94, 0x60, 0xbb,
	0xfe, 0x40, 0xf2, 0x44, 0xed, 0x3d, 0xb3, 0x6a, 0xd1, 0x53, 0x24, 0x77, 0x0b, 0x99, 0x14, 0xc1,
	0x9e, 0x59, 0xe0, 0x27, 0xb7, 0xe7, 0xaa, 0x96, 0xbb, 0x69, 0x96, 0x3f, 0x05, 0x26, 0x01, 0xf7,
	0x1e, 0xd8, 0xba, 0x17, 0xf6, 0x60, 0x32, 0x61, 0x61, 0xdc, 0xe3, 0xf9, 0x5d, 0x1e, 0xff, 0xd5,
	0xa4, 0xa5, 0x8a, 0xb4, 0x20, 0xb9, 0x9f, 0x10, 0xd8, 0x1a, 0xc3, 0x7b, 0x60, 0xf7, 0x58, 0x9b,
	0xf7, 0x0a, 0xe5, 0xbc, 0x57, 0x7c, 0x95, 0xde, 0xb3, 0x1c, 0x5f, 0x67, 0x81, 0xf0, 0x9f, 0xe6,
	0xd9, 0x7f, 0x49, 0x9d, 0xff, 0xfa, 0xaa, 0xb5, 0xfe, 0xc1, 0x26, 0x8b, 0x25, 0x17, 0xf9, 0xc1,
	0x85, 0x5c, 0x8a, 0xa0, 0x43, 0x4d, 0x3f, 0x7c, 0x17, 0x6c, 0x3d, 0x8f, 0xb9, 0x0c, 0x17, 0xcf,
	0x3a, 0xeb, 0xd9, 0xfc, 0x59, 0x73, 0xe4, 0x95, 0x1d, 0xd6, 0xeb, 0x73, 0x6a, 0xe8, 0xee, 0x1a,
	0xd8, 0x3a, 0x15, 0xbc, 0x02, 0xb3, 0x1a, 0x6b, 0x49, 0xc1, 0x59, 0x58, 0xec, 0x70, 0x65, 0xe4,
	0x0e, 0xb4, 0x4a, 0x0c, 0x7f, 0x22, 0xb7, 0xa4, 0xa3, 0x2a, 0xdf, 0x3f, 0x38, 0x22, 0xd6, 0xe1,
	0x11, 0xb1, 0x4e, 0x8e, 0x08, 0x7a, 0x97, 0x11, 0xf4, 0x31, 0x23, 0x68, 0x3f, 0x23, 0xe8, 0x20,
	0x23, 0xe8, 0x6b, 0x46, 0xd0, 0xb7, 0x8c, 0x58, 0x27, 0x19, 0x41, 0xef, 0x8f, 0x89, 0x75, 0x70,
	0x4c, 0xac, 0xc3, 0x63, 0x62, 0xbd, 0x1a, 0xf9, 0x0d, 0xb6, 0x6d, 0xf5, 0xdf, 0xb9, 0xfd, 0x23,
	0x00, 0x00, 0xff, 0xff, 0xa2, 0x2a, 0x9a, 0xd2, 0x31, 0x05, 0x00, 0x00,
}

func (this *PrometheusInstantQueryResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PrometheusInstantQueryResponse)
	if !ok {
		that2, ok := that.(PrometheusInstantQueryResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !this.Data.Equal(&that1.Data) {
		return false
	}
	if this.ErrorType != that1.ErrorType {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	if len(this.Headers) != len(that1.Headers) {
		return false
	}
	for i := range this.Headers {
		if !this.Headers[i].Equal(that1.Headers[i]) {
			return false
		}
	}
	return true
}
func (this *PrometheusInstantQueryData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PrometheusInstantQueryData)
	if !ok {
		that2, ok := that.(PrometheusInstantQueryData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ResultType != that1.ResultType {
		return false
	}
	if !this.Result.Equal(&that1.Result) {
		return false
	}
	if !this.Stats.Equal(that1.Stats) {
		return false
	}
	return true
}
func (this *PrometheusInstantQueryResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PrometheusInstantQueryResult)
	if !ok {
		that2, ok := that.(PrometheusInstantQueryResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Result == nil {
		if this.Result != nil {
			return false
		}
	} else if this.Result == nil {
		return false
	} else if !this.Result.Equal(that1.Result) {
		return false
	}
	return true
}
func (this *PrometheusInstantQueryResult_Vector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PrometheusInstantQueryResult_Vector)
	if !ok {
		that2, ok := that.(PrometheusInstantQueryResult_Vector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Vector.Equal(that1.Vector) {
		return false
	}
	return true
}
func (this *PrometheusInstantQueryResult_RawBytes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PrometheusInstantQueryResult_RawBytes)
	if !ok {
		that2, ok := that.(PrometheusInstantQueryResult_RawBytes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.RawBytes, that1.RawBytes) {
		return false
	}
	return true
}
func (this *PrometheusInstantQueryResult_Matrix) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PrometheusInstantQueryResult_Matrix)
	if !ok {
		that2, ok := that.(PrometheusInstantQueryResult_Matrix)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Matrix.Equal(that1.Matrix) {
		return false
	}
	return true
}
func (this *Vector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Vector)
	if !ok {
		that2, ok := that.(Vector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Samples) != len(that1.Samples) {
		return false
	}
	for i := range this.Samples {
		if !this.Samples[i].Equal(that1.Samples[i]) {
			return false
		}
	}
	return true
}
func (this *Sample) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Sample)
	if !ok {
		that2, ok := that.(Sample)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if !this.Labels[i].Equal(that1.Labels[i]) {
			return false
		}
	}
	if !this.Sample.Equal(&that1.Sample) {
		return false
	}
	return true
}
func (this *Matrix) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Matrix)
	if !ok {
		that2, ok := that.(Matrix)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.SampleStreams) != len(that1.SampleStreams) {
		return false
	}
	for i := range this.SampleStreams {
		if !this.SampleStreams[i].Equal(&that1.SampleStreams[i]) {
			return false
		}
	}
	return true
}
func (this *PrometheusInstantQueryResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&instantquery.PrometheusInstantQueryResponse{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Data: "+strings.Replace(this.Data.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "ErrorType: "+fmt.Sprintf("%#v", this.ErrorType)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	if this.Headers != nil {
		s = append(s, "Headers: "+fmt.Sprintf("%#v", this.Headers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PrometheusInstantQueryData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&instantquery.PrometheusInstantQueryData{")
	s = append(s, "ResultType: "+fmt.Sprintf("%#v", this.ResultType)+",\n")
	s = append(s, "Result: "+strings.Replace(this.Result.GoString(), `&`, ``, 1)+",\n")
	if this.Stats != nil {
		s = append(s, "Stats: "+fmt.Sprintf("%#v", this.Stats)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PrometheusInstantQueryResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&instantquery.PrometheusInstantQueryResult{")
	if this.Result != nil {
		s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PrometheusInstantQueryResult_Vector) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&instantquery.PrometheusInstantQueryResult_Vector{` +
		`Vector:` + fmt.Sprintf("%#v", this.Vector) + `}`}, ", ")
	return s
}
func (this *PrometheusInstantQueryResult_RawBytes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&instantquery.PrometheusInstantQueryResult_RawBytes{` +
		`RawBytes:` + fmt.Sprintf("%#v", this.RawBytes) + `}`}, ", ")
	return s
}
func (this *PrometheusInstantQueryResult_Matrix) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&instantquery.PrometheusInstantQueryResult_Matrix{` +
		`Matrix:` + fmt.Sprintf("%#v", this.Matrix) + `}`}, ", ")
	return s
}
func (this *Vector) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&instantquery.Vector{")
	if this.Samples != nil {
		s = append(s, "Samples: "+fmt.Sprintf("%#v", this.Samples)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Sample) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&instantquery.Sample{")
	s = append(s, "Labels: "+fmt.Sprintf("%#v", this.Labels)+",\n")
	s = append(s, "Sample: "+strings.Replace(this.Sample.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Matrix) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&instantquery.Matrix{")
	if this.SampleStreams != nil {
		vs := make([]*tripperware.SampleStream, len(this.SampleStreams))
		for i := range vs {
			vs[i] = &this.SampleStreams[i]
		}
		s = append(s, "SampleStreams: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringInstantquery(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *PrometheusInstantQueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrometheusInstantQueryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrometheusInstantQueryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Headers) > 0 {
		for iNdEx := len(m.Headers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Headers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintInstantquery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintInstantquery(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ErrorType) > 0 {
		i -= len(m.ErrorType)
		copy(dAtA[i:], m.ErrorType)
		i = encodeVarintInstantquery(dAtA, i, uint64(len(m.ErrorType)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintInstantquery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintInstantquery(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrometheusInstantQueryData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrometheusInstantQueryData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrometheusInstantQueryData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Stats != nil {
		{
			size, err := m.Stats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInstantquery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintInstantquery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.ResultType) > 0 {
		i -= len(m.ResultType)
		copy(dAtA[i:], m.ResultType)
		i = encodeVarintInstantquery(dAtA, i, uint64(len(m.ResultType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrometheusInstantQueryResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrometheusInstantQueryResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrometheusInstantQueryResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size := m.Result.Size()
			i -= size
			if _, err := m.Result.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *PrometheusInstantQueryResult_Vector) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *PrometheusInstantQueryResult_Vector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Vector != nil {
		{
			size, err := m.Vector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInstantquery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *PrometheusInstantQueryResult_RawBytes) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *PrometheusInstantQueryResult_RawBytes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RawBytes != nil {
		i -= len(m.RawBytes)
		copy(dAtA[i:], m.RawBytes)
		i = encodeVarintInstantquery(dAtA, i, uint64(len(m.RawBytes)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *PrometheusInstantQueryResult_Matrix) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *PrometheusInstantQueryResult_Matrix) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Matrix != nil {
		{
			size, err := m.Matrix.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInstantquery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Vector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Samples) > 0 {
		for iNdEx := len(m.Samples) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Samples[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintInstantquery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Sample) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Sample) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Sample) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Sample.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintInstantquery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Labels) > 0 {
		for iNdEx := len(m.Labels) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Labels[iNdEx].Size()
				i -= size
				if _, err := m.Labels[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintInstantquery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Matrix) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Matrix) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Matrix) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SampleStreams) > 0 {
		for iNdEx := len(m.SampleStreams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SampleStreams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintInstantquery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintInstantquery(dAtA []byte, offset int, v uint64) int {
	offset -= sovInstantquery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PrometheusInstantQueryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovInstantquery(uint64(l))
	}
	l = m.Data.Size()
	n += 1 + l + sovInstantquery(uint64(l))
	l = len(m.ErrorType)
	if l > 0 {
		n += 1 + l + sovInstantquery(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovInstantquery(uint64(l))
	}
	if len(m.Headers) > 0 {
		for _, e := range m.Headers {
			l = e.Size()
			n += 1 + l + sovInstantquery(uint64(l))
		}
	}
	return n
}

func (m *PrometheusInstantQueryData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ResultType)
	if l > 0 {
		n += 1 + l + sovInstantquery(uint64(l))
	}
	l = m.Result.Size()
	n += 1 + l + sovInstantquery(uint64(l))
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovInstantquery(uint64(l))
	}
	return n
}

func (m *PrometheusInstantQueryResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		n += m.Result.Size()
	}
	return n
}

func (m *PrometheusInstantQueryResult_Vector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vector != nil {
		l = m.Vector.Size()
		n += 1 + l + sovInstantquery(uint64(l))
	}
	return n
}
func (m *PrometheusInstantQueryResult_RawBytes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RawBytes != nil {
		l = len(m.RawBytes)
		n += 1 + l + sovInstantquery(uint64(l))
	}
	return n
}
func (m *PrometheusInstantQueryResult_Matrix) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Matrix != nil {
		l = m.Matrix.Size()
		n += 1 + l + sovInstantquery(uint64(l))
	}
	return n
}
func (m *Vector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Samples) > 0 {
		for _, e := range m.Samples {
			l = e.Size()
			n += 1 + l + sovInstantquery(uint64(l))
		}
	}
	return n
}

func (m *Sample) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Labels) > 0 {
		for _, e := range m.Labels {
			l = e.Size()
			n += 1 + l + sovInstantquery(uint64(l))
		}
	}
	l = m.Sample.Size()
	n += 1 + l + sovInstantquery(uint64(l))
	return n
}

func (m *Matrix) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SampleStreams) > 0 {
		for _, e := range m.SampleStreams {
			l = e.Size()
			n += 1 + l + sovInstantquery(uint64(l))
		}
	}
	return n
}

func sovInstantquery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInstantquery(x uint64) (n int) {
	return sovInstantquery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *PrometheusInstantQueryResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForHeaders := "[]*PrometheusResponseHeader{"
	for _, f := range this.Headers {
		repeatedStringForHeaders += strings.Replace(fmt.Sprintf("%v", f), "PrometheusResponseHeader", "tripperware.PrometheusResponseHeader", 1) + ","
	}
	repeatedStringForHeaders += "}"
	s := strings.Join([]string{`&PrometheusInstantQueryResponse{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Data:` + strings.Replace(strings.Replace(this.Data.String(), "PrometheusInstantQueryData", "PrometheusInstantQueryData", 1), `&`, ``, 1) + `,`,
		`ErrorType:` + fmt.Sprintf("%v", this.ErrorType) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`Headers:` + repeatedStringForHeaders + `,`,
		`}`,
	}, "")
	return s
}
func (this *PrometheusInstantQueryData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PrometheusInstantQueryData{`,
		`ResultType:` + fmt.Sprintf("%v", this.ResultType) + `,`,
		`Result:` + strings.Replace(strings.Replace(this.Result.String(), "PrometheusInstantQueryResult", "PrometheusInstantQueryResult", 1), `&`, ``, 1) + `,`,
		`Stats:` + strings.Replace(fmt.Sprintf("%v", this.Stats), "PrometheusResponseStats", "tripperware.PrometheusResponseStats", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PrometheusInstantQueryResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PrometheusInstantQueryResult{`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PrometheusInstantQueryResult_Vector) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PrometheusInstantQueryResult_Vector{`,
		`Vector:` + strings.Replace(fmt.Sprintf("%v", this.Vector), "Vector", "Vector", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PrometheusInstantQueryResult_RawBytes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PrometheusInstantQueryResult_RawBytes{`,
		`RawBytes:` + fmt.Sprintf("%v", this.RawBytes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PrometheusInstantQueryResult_Matrix) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PrometheusInstantQueryResult_Matrix{`,
		`Matrix:` + strings.Replace(fmt.Sprintf("%v", this.Matrix), "Matrix", "Matrix", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Vector) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSamples := "[]*Sample{"
	for _, f := range this.Samples {
		repeatedStringForSamples += strings.Replace(f.String(), "Sample", "Sample", 1) + ","
	}
	repeatedStringForSamples += "}"
	s := strings.Join([]string{`&Vector{`,
		`Samples:` + repeatedStringForSamples + `,`,
		`}`,
	}, "")
	return s
}
func (this *Sample) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Sample{`,
		`Labels:` + fmt.Sprintf("%v", this.Labels) + `,`,
		`Sample:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Sample), "Sample", "cortexpb.Sample", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Matrix) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSampleStreams := "[]SampleStream{"
	for _, f := range this.SampleStreams {
		repeatedStringForSampleStreams += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForSampleStreams += "}"
	s := strings.Join([]string{`&Matrix{`,
		`SampleStreams:` + repeatedStringForSampleStreams + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringInstantquery(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *PrometheusInstantQueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInstantquery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrometheusInstantQueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrometheusInstantQueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstantquery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInstantquery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInstantquery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstantquery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInstantquery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInstantquery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstantquery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInstantquery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInstantquery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstantquery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInstantquery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInstantquery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstantquery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInstantquery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInstantquery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Headers = append(m.Headers, &tripperware.PrometheusResponseHeader{})
			if err := m.Headers[len(m.Headers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInstantquery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInstantquery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInstantquery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrometheusInstantQueryData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInstantquery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrometheusInstantQueryData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrometheusInstantQueryData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstantquery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInstantquery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInstantquery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResultType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstantquery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInstantquery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInstantquery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstantquery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInstantquery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInstantquery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &tripperware.PrometheusResponseStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInstantquery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInstantquery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInstantquery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrometheusInstantQueryResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInstantquery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrometheusInstantQueryResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrometheusInstantQueryResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstantquery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInstantquery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInstantquery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Vector{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Result = &PrometheusInstantQueryResult_Vector{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstantquery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInstantquery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthInstantquery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Result = &PrometheusInstantQueryResult_RawBytes{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Matrix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstantquery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInstantquery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInstantquery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Matrix{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Result = &PrometheusInstantQueryResult_Matrix{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInstantquery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInstantquery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInstantquery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInstantquery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Samples", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstantquery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInstantquery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInstantquery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Samples = append(m.Samples, &Sample{})
			if err := m.Samples[len(m.Samples)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInstantquery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInstantquery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInstantquery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Sample) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInstantquery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sample: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sample: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstantquery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInstantquery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInstantquery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Labels = append(m.Labels, github_com_cortexproject_cortex_pkg_cortexpb.LabelAdapter{})
			if err := m.Labels[len(m.Labels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sample", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstantquery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInstantquery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInstantquery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Sample.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInstantquery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInstantquery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInstantquery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Matrix) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInstantquery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Matrix: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Matrix: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SampleStreams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInstantquery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInstantquery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInstantquery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SampleStreams = append(m.SampleStreams, tripperware.SampleStream{})
			if err := m.SampleStreams[len(m.SampleStreams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInstantquery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInstantquery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInstantquery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInstantquery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInstantquery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInstantquery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInstantquery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInstantquery
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthInstantquery
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowInstantquery
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipInstantquery(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthInstantquery
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthInstantquery = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInstantquery   = fmt.Errorf("proto: integer overflow")
)
