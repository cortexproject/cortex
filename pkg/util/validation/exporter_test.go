package validation

import (
	"context"
	"sync"
	"testing"

	"github.com/prometheus/client_golang/prometheus/testutil"
	"github.com/stretchr/testify/assert"
)

func TestOverridesExporter_noConfig(t *testing.T) {
	cfgChan := make(chan map[string]*Limits)
	exporter := NewOverridesExporter(cfgChan)

	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	wg := sync.WaitGroup{}
	wg.Add(1)
	go func() {
		defer wg.Done()
		_ = exporter.loop(ctx)
	}()

	// With no updated override configurations, there should be no override metrics
	count := testutil.CollectAndCount(exporter, "cortex_overrides")
	assert.Equal(t, 0, count)

	// stop the exporter loop and wait for the goroutine to end
	cancel()
	wg.Wait()
}

func TestOverridesExporter_withConfig(t *testing.T) {
	cfgChan := make(chan map[string]*Limits)
	exporter := NewOverridesExporter(cfgChan)

	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	wg := sync.WaitGroup{}
	wg.Add(1)
	go func() {
		defer wg.Done()
		_ = exporter.loop(ctx)
	}()

	cfg := make(map[string]*Limits)
	cfg["user1"] = &Limits{}
	cfgChan <- cfg

	// There should be at least a few metrics generated by receiving an override configuration map
	count := testutil.CollectAndCount(exporter, "cortex_overrides")
	assert.Greater(t, count, 0)

	// stop the exporter loop and wait for the goroutine to end
	cancel()
	wg.Wait()
}
