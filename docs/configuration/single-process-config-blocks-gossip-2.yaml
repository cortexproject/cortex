
# Configuration for running Cortex in single-process mode.
# This should not be used in production.  It is only for getting started
# and development.

# Disable the requirement that every request to Cortex has a
# X-Scope-OrgID header. `fake` will be substituted in instead.
auth_enabled: false

server:
  http_listen_port: 9209
  grpc_listen_port: 9295

  # Configure the server to allow messages up to 100MB.
  grpc_server_max_recv_msg_size: 104857600
  grpc_server_max_send_msg_size: 104857600
  grpc_server_max_concurrent_streams: 1000

distributor:
  shard_by_all_labels: true
  pool:
    health_check_ingesters: true

ingester_client:
  grpc_client_config:
    # Configure the client to allow messages up to 100MB.
    max_recv_msg_size: 104857600
    max_send_msg_size: 104857600
    grpc_compression: gzip

ingester:
  lifecycler:
    # The address to advertise for this ingester.  Will be autodiscovered by
    # looking up address on eth0 or en0; can be specified if this fails.
    address: 127.0.0.1
    id: "Ingester 2" # Since

    # We don't want to join immediately, but wait a bit to see other ingesters and their tokens first.
    # It can take a while to have the full picture when using gossip
    join_after: 10s

    # To avoid generating same tokens by multiple ingesters, they can "observe" the ring for a while,
    # after putting their own tokens into it. This is only useful when using gossip, since multiple
    # ingesters joining at the same time can have conflicting tokens if they don't see each other yet.
    observe_period: 10s
    min_ready_duration: 0s
    final_sleep: 5s
    num_tokens: 512

    # Use an in memory ring store, so we don't need to launch a Consul.
    ring:
      kvstore:
        store: memberlist

      replication_factor: 1

memberlist:
  bind_port: 7947
  join_members:
    - localhost:7946
  abort_if_cluster_join_fails: false

storage:
  engine: blocks

blocks_storage:
  tsdb:
    dir: /tmp/cortex/tsdb-ing2

  bucket_store:
    sync_dir: /tmp/cortex/tsdb-sync-querier2

  # This is where Cortex uploads generated blocks. Queriers will fetch blocks from here as well.
  # Cortex of course supports multiple options (S3, GCS, Azure), but for demonstration purposes
  # we only use shared directory.
  backend: filesystem # s3, gcs, azure, swift or filesystem are valid options
  filesystem:
    dir: /tmp/cortex/storage

store_gateway:
  sharding_enabled: true
  sharding_ring:
    kvstore:
      store: memberlist

frontend_worker:
  match_max_concurrent: true

ruler:
  enable_api: true
  enable_sharding: true
  ring:
    num_tokens: 512
    kvstore:
      store: memberlist

ruler_storage:
  backend: local
  local:
    directory: /tmp/cortex/rules
