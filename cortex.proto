syntax = "proto3";

package cortex;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;

service Ingester {
  rpc Push(WriteRequest) returns (WriteResponse) {};
  rpc Query(QueryRequest) returns (QueryResponse) {};
  rpc LabelValues(LabelValuesRequest) returns (LabelValuesResponse) {};
  rpc UserStats(UserStatsRequest) returns (UserStatsResponse) {};
  rpc MetricsForLabelMatchers(MetricsForLabelMatchersRequest) returns (MetricsForLabelMatchersResponse) {};
}

message WriteRequest {
  repeated TimeSeries timeseries = 1 [(gogoproto.nullable) = false];
}

message WriteResponse {}

message QueryRequest {
  int64 start_timestamp_ms = 1;
  int64 end_timestamp_ms = 2;
  repeated LabelMatcher matchers = 3;
}

message QueryResponse {
  repeated TimeSeries timeseries = 1 [(gogoproto.nullable) = false];
}

message LabelValuesRequest {
  string label_name = 1;
}

message LabelValuesResponse {
  repeated string label_values = 1;
}

message UserStatsRequest {}

message UserStatsResponse {
  double ingestion_rate = 1;
  uint64 num_series = 2;
}

message MetricsForLabelMatchersRequest {
  int64 start_timestamp_ms = 1;
  int64 end_timestamp_ms = 2;
  repeated LabelMatchers matchers_set = 3;
}

message MetricsForLabelMatchersResponse {
  repeated Metric metric = 1;
}


message TimeSeries {
  repeated LabelPair labels = 1 [(gogoproto.nullable) = false];
  // Sorted by time, oldest sample first.
  repeated Sample samples   = 2 [(gogoproto.nullable) = false];
}

message LabelPair {
  bytes name  = 1 [(gogoproto.customtype) = "github.com/weaveworks/cortex/util/wire.Bytes", (gogoproto.nullable) = false];
  bytes value = 2 [(gogoproto.customtype) = "github.com/weaveworks/cortex/util/wire.Bytes", (gogoproto.nullable) = false];
}

message Sample {
  double value       = 1;
  int64 timestamp_ms = 2;
}

message LabelMatchers {
  repeated LabelMatcher matchers = 1;
}

message Metric {
  repeated LabelPair labels = 1 [(gogoproto.nullable) = false];
}

enum MatchType {
  EQUAL = 0;
  NOT_EQUAL = 1;
  REGEX_MATCH = 2;
  REGEX_NO_MATCH = 3;
}

message LabelMatcher {
  MatchType type = 1;
  string name = 2;
  string value = 3;
}
