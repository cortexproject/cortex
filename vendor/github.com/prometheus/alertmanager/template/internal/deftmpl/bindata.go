// Code generated by go-bindata.
// sources:
// template/default.tmpl
// DO NOT EDIT!

package deftmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateDefaultTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3b\x6b\x6f\xdb\x36\xbb\xdf\xf5\x2b\x9e\x69\x38\x58\x03\x58\x96\x93\x6e\xc5\xe2\xd8\x39\x70\x1d\xa5\x11\x8e\x23\x07\xb2\xd2\xae\x18\x86\x80\x96\x68\x9b\xad\x44\x6a\x24\x95\xc4\xcb\xfc\xdf\x0f\x48\xc9\x17\xc5\x72\xe2\x14\x5d\xe2\xf7\x5d\x12\xb4\x91\x28\x3e\xf7\x2b\x45\xea\xee\x0e\x22\x3c\x22\x14\x83\x79\x75\x85\x62\xcc\x65\x82\x28\x1a\x63\x6e\xc2\x6c\xd6\x51\xf7\xe7\xf9\xfd\xdd\x1d\x60\x1a\xc1\x6c\x66\x6c\x04\xb9\xf4\x7b\x0a\xea\xee\x0e\xea\xce\xad\xc4\x9c\xa2\xf8\xd2\xef\xc1\x6c\x66\xff\x68\xeb\x79\xe2\x7f\x39\x0e\x31\xb9\xc6\xbc\xad\x26\xf9\xc5\x4d\x0e\x53\x60\x2f\xa3\x17\xd9\xf0\x0b\x0e\xa5\x42\xfb\xbb\x02\x19\x48\x24\x33\x01\x7f\x83\x64\x97\x69\x3a\x07\x25\x23\xc0\x7f\x2e\x1e\x9a\x23\xc2\x09\x1d\x2b\x98\xa6\x82\xd1\x52\x88\xfa\xa9\x1e\x85\xbf\x21\xc6\x74\x95\xe2\x1f\xa0\x26\x7d\xe0\x2c\x4b\x7b\x68\x88\x63\x51\x1f\x30\x2e\x71\x74\x81\x08\x17\xf5\x8f\x28\xce\xb0\x22\xf8\x85\x11\x0a\x26\x28\xac\x90\x93\x1c\x4b\x78\xa3\x70\xd5\xbb\x2c\x49\x18\xcd\x81\xf7\x8a\xb1\x15\x7c\x7b\x30\x9b\xbd\xb9\xbb\x83\x1b\x22\x27\xe5\xc9\x75\x1f\x27\xec\x1a\x97\xa9\x7b\x28\xc1\xa2\x50\x63\x15\xf5\x05\xe3\x7b\x8b\xab\x0d\xb6\x89\xb0\x08\x39\x49\x25\x61\xd4\x7c\x40\xc7\x12\xdf\xca\xdc\x8e\x57\x31\x11\xb2\x98\xca\x11\x1d\x63\xa8\xc3\x6c\x96\xf3\xd5\x34\x96\x83\xeb\x7a\x52\x5a\xb1\xb4\x22\x15\xfb\xea\xae\x0d\x0b\x01\x0a\xc6\x72\xe2\x1d\x4a\x99\x44\x8a\xa7\x12\xca\x95\xe1\x6f\xc3\x3b\x60\x19\x0f\x71\x33\x37\x26\xa6\x98\x23\xc9\x78\xee\x7e\x46\x85\xa2\x4a\x3a\x10\x31\x0a\xbf\xd6\x23\x3c\x42\x59\x2c\xeb\x92\xc8\x18\x17\x5a\x90\x38\x49\x63\x24\xcb\xbe\x58\xdf\xa4\xf2\x32\x9e\x4c\xa8\x10\x48\xaa\x50\x95\x03\x6d\x4b\x7c\x23\x14\xc7\x43\x14\x7e\x5d\xc3\x57\xc9\xbe\x42\x0a\x7f\xc3\x63\x13\x63\x42\xbf\x6e\xcd\x41\xca\xb1\x72\x16\x73\xbb\xd9\x2b\xf8\x1f\x54\x80\x4e\x1b\x5b\x72\x40\x42\x46\x71\xc2\xbe\x90\x2d\x79\x50\xf3\x33\x1e\x6f\xcb\xf1\x9a\x70\x25\x37\x99\x90\x34\x9c\x20\xb9\x34\x08\x67\xc9\xb7\x1b\xf7\x3e\xb6\x04\x0b\x81\xc6\x4f\x70\xbc\x12\x6f\xa9\xa2\x16\x65\x72\xba\xc0\xb7\x1e\xfd\x4f\x73\xe6\x75\x8c\x61\x4c\x30\x95\xdf\x2e\xf1\x26\x8c\xcb\xba\xf1\x6d\x2e\xb2\x8e\x97\x50\x21\x11\x0d\xb1\xa8\xc0\xbb\x96\xee\x1e\xd0\x2a\x4b\xc5\x18\x53\x82\xbf\xdd\x48\x0f\x21\x5b\xb7\x50\x51\x1d\x36\x24\xc3\xca\x72\x60\xdc\x2b\x46\xa5\x6a\xb7\x07\x0d\xb0\x66\x33\x23\x1f\x84\x7c\x50\xa7\xdd\x87\x35\x52\x2e\x99\x9a\x88\xb5\x22\x51\x05\x3d\x1f\x0b\x16\x5f\xe3\xe8\x1e\xc5\xf9\xf0\xf6\x34\xe7\x10\x6b\x54\xad\x6d\x54\x2a\x74\x15\x78\xba\x37\x95\xac\x7e\x4d\x42\xc9\x38\x4b\xc5\x12\xad\x44\x12\x5f\x95\x8d\xff\x6a\xab\xa7\xd9\x6a\x5d\xab\x98\x4a\x22\xa7\x57\x11\x11\x69\x8c\xa6\x57\x1b\x6a\xe5\xe3\x81\xb5\x8e\x39\x61\x94\x48\xa6\x14\x72\x25\x19\x8b\x9f\x98\xb2\x56\x71\xe3\x04\x91\x78\xe9\x07\xcb\x76\xf4\xc9\x5c\x96\x31\x4d\x64\xa2\xd9\x32\x5a\x3f\x9c\xf4\xbb\xc1\xe7\x0b\x07\xd4\x10\x5c\x5c\xbe\xef\xb9\x5d\x30\x2d\xdb\xfe\xf4\xb6\x6b\xdb\x27\xc1\x09\xfc\x76\x16\x9c\xf7\x60\xbf\xde\x80\x80\x23\x2a\x88\x72\x36\x14\xdb\xb6\xe3\x99\x60\x4e\xa4\x4c\x9b\xb6\x7d\x73\x73\x53\xbf\x79\x5b\x67\x7c\x6c\x07\xbe\x7d\xab\x70\xed\x2b\xe0\xe2\xd2\x92\x2b\x90\xf5\x48\x46\xe6\xb1\xd1\xfa\xc1\xb2\x8c\x81\x9c\xc6\x18\x10\x8d\x40\x13\x89\x30\x27\xca\xa0\xaa\xb4\x81\x42\x2d\x9a\xb6\x3d\x26\x72\x92\x0d\xeb\x21\x4b\x6c\x25\xc3\x38\xa3\xb6\x46\x87\xc2\x1c\x9f\xa5\x45\xb3\xe6\xea\x10\x86\x61\x04\x13\x0c\xe7\x6e\x00\x3d\x12\x62\x2a\x30\xbc\x39\x77\x83\x3d\xc3\xe8\xb2\x74\xca\xc9\x78\x22\xe1\x4d\xb8\x07\x07\x8d\xfd\x9f\xe1\x3c\xc7\x68\x18\x17\x98\x27\x44\x08\xc2\x28\x10\x01\x13\xcc\xf1\x70\x0a\x63\x8e\xa8\xc4\x51\x0d\x46\x1c\x63\x60\x23\x08\x27\x88\x8f\x71\x0d\x24\x03\x44\xa7\x90\x62\x2e\x18\x05\x36\x94\x88\x50\xe5\xff\x08\x42\x96\x4e\x0d\x36\x02\x39\x21\x02\x04\x1b\xc9\x1b\xc4\x73\x09\x91\x10\x2c\x24\x48\xe2\x08\x22\x16\x66\x09\xa6\x79\xe0\xc2\x88\xc4\x58\xc0\x1b\x39\xc1\x60\x0e\x0a\x08\x73\x4f\x13\x89\x30\x8a\x0d\x42\x41\x3d\x9b\x3f\xd2\x9d\x3c\xcb\x24\x70\x2c\x24\x27\x5a\x0b\x35\x20\x34\x8c\xb3\x48\xf1\x30\x7f\x1c\x93\x84\x14\x14\x14\xb8\x16\x5c\x18\x92\x41\x26\x70\x4d\xf3\x59\x83\x84\x45\x64\xa4\xfe\x62\x2d\x56\x9a\x0d\x63\x22\x26\x35\x88\x88\x42\x3d\xcc\x24\xae\x81\x50\x83\x5a\x8f\x35\x25\x87\xcd\x38\x08\x1c\xc7\x46\xc8\x52\x82\x05\x68\x59\x97\xdc\xe9\x39\x8a\xf5\x54\x29\x54\x16\x2a\x12\x6a\xe4\x66\xc2\x92\xb2\x24\x44\x18\xa3\x8c\x53\x22\x26\x58\xc3\x44\x0c\x04\xd3\x14\x95\x37\xab\x11\x35\x7d\xc4\xe2\x98\xdd\x28\xd1\x42\x46\x23\x52\x34\xef\xda\xc8\x68\xa8\x16\x30\xe1\xc2\xae\x94\x49\x12\xe6\xea\xd6\x06\x48\x97\x56\x2d\x1e\x89\x09\x8a\x63\x18\xe2\x42\x61\x38\x02\x42\x01\xad\x88\xc3\x15\x79\x55\xbf\x25\x41\x31\xa4\x8c\x6b\x7a\xf7\xc5\xac\x1b\x46\x70\xe6\xc0\xa0\x7f\x1a\x7c\xea\xf8\x0e\xb8\x03\xb8\xf0\xfb\x1f\xdd\x13\xe7\x04\xcc\xce\x00\xdc\x81\x59\x83\x4f\x6e\x70\xd6\xbf\x0c\xe0\x53\xc7\xf7\x3b\x5e\xf0\x19\xfa\xa7\xd0\xf1\x3e\xc3\xff\xb9\xde\x49\x0d\x9c\xdf\x2e\x7c\x67\x30\x80\xbe\x6f\xb8\xe7\x17\x3d\xd7\x39\xa9\x81\xeb\x75\x7b\x97\x27\xae\xf7\x01\xde\x5f\x06\xe0\xf5\x03\xe8\xb9\xe7\x6e\xe0\x9c\x40\xd0\x07\x45\xb0\x40\xe5\x3a\x03\x85\xec\xdc\xf1\xbb\x67\x1d\x2f\xe8\xbc\x77\x7b\x6e\xf0\xb9\x66\x9c\xba\x81\xa7\x70\x9e\xf6\x7d\xe8\xc0\x45\xc7\x0f\xdc\xee\x65\xaf\xe3\xc3\xc5\xa5\x7f\xd1\x1f\x38\xd0\xf1\x4e\xc0\xeb\x7b\xae\x77\xea\xbb\xde\x07\xe7\xdc\xf1\x82\x3a\xb8\x1e\x78\x7d\x70\x3e\x3a\x5e\x00\x83\xb3\x4e\xaf\xa7\x48\x19\x9d\xcb\xe0\xac\xef\x2b\xfe\xa0\xdb\xbf\xf8\xec\xbb\x1f\xce\x02\x38\xeb\xf7\x4e\x1c\x7f\x00\xef\x1d\xe8\xb9\x9d\xf7\x3d\x27\x27\xe5\x7d\x86\x6e\xaf\xe3\x9e\xd7\xe0\xa4\x73\xde\xf9\xe0\x68\xa8\x7e\x70\xe6\xf8\x86\x9a\x96\x73\x07\x9f\xce\x1c\x35\xa4\xe8\x75\x3c\xe8\x74\x03\xb7\xef\x29\x31\xba\x7d\x2f\xf0\x3b\xdd\xa0\x06\x41\xdf\x0f\x16\xa0\x9f\xdc\x81\x53\x83\x8e\xef\x0e\x94\x42\x4e\xfd\xfe\x79\xcd\x50\xea\xec\x9f\xaa\x29\xae\xa7\xe0\x3c\x27\xc7\xa2\x54\x0d\x25\x8b\xf4\x7d\x7d\x7f\x39\x70\x16\x08\xe1\xc4\xe9\xf4\x5c\xef\xc3\x40\x01\x2b\x11\xe7\x93\xeb\x86\x65\x1d\x1b\x2d\x9d\x02\x6f\x93\x98\x8a\x76\x45\x62\xdb\x3f\x3c\x3c\xcc\xf3\x99\xb9\xdd\x24\xa1\x92\x5b\xdb\x1c\x31\x2a\xad\x11\x4a\x48\x3c\x6d\xc2\x4f\x67\x38\xbe\xc6\x92\x84\x08\x3c\x9c\xe1\x9f\x6a\xb0\x18\xa8\x41\x87\x13\x14\xd7\x40\x20\x2a\x2c\x81\x39\x19\x1d\xc1\x90\xdd\x5a\x82\xfc\xa5\x6a\x31\x0c\x19\x8f\x30\xb7\x86\xec\xf6\x08\x34\x52\x41\xfe\xc2\x4d\xd8\xff\x39\xbd\x3d\x82\x04\xf1\x31\xa1\x4d\x68\x1c\xa9\xdc\x3a\xc1\x28\x7a\x49\xfa\x09\x96\x08\x54\x45\x6d\x9b\xd7\x04\xdf\xa8\x28\x32\x55\xf4\x4a\x4c\x65\xdb\xbc\x21\x91\x9c\xb4\x23\x7c\x4d\x42\x6c\xe9\x9b\x97\x53\x16\xd8\x73\x76\x95\x31\x2d\xfc\x67\x46\xae\xdb\x66\x37\x67\xd5\x0a\xa6\x29\x5e\x61\x5c\xb5\x22\xb6\x32\xee\x91\xae\x04\x02\xcb\xf6\x65\x70\x6a\xfd\xfa\xc2\xec\xeb\xa5\xee\xcb\x99\xfb\xa1\x5e\xa4\x65\x6b\xe6\x8e\x0d\xa3\x65\x2b\xa7\x54\x17\x43\x16\x4d\x81\x48\x9c\x88\x90\xa5\xb8\x6d\x9a\xfa\x46\x4e\xd5\x75\x11\x51\x22\x9c\xe0\x04\xe9\x88\x72\x54\x75\x3f\x9f\xf7\xbe\xcf\x2a\xa4\x75\x83\x87\x5f\x89\xb4\xf2\x07\x09\x63\x72\xa2\x81\xf2\xda\x40\x90\xc0\xd1\x72\x92\xf2\x0d\x0d\x6d\xa1\xe8\x4b\x26\x64\x13\x28\xa3\xf8\x08\x26\x58\x55\xa6\x26\xec\x37\x1a\xff\x73\x04\x31\xa1\xd8\x5a\x0c\xd5\xdf\xe1\xe4\x08\x74\x04\xe4\x13\xe0\x07\x92\xa8\x60\x41\x54\x1e\xc1\x10\x85\x5f\xc7\x9c\x65\x34\xb2\x42\x16\x33\xde\x84\x1f\x47\xef\xd4\xef\xaa\xfa\x21\x45\x51\xa4\xb9\x52\xde\x30\x1c\xeb\x99\x6d\xb3\x98\x69\x2a\x7d\x4b\x34\x7c\x6e\xf7\x58\x11\x69\x4b\x39\x2a\x79\x07\x68\x49\xfe\x82\x79\x0c\x40\x71\xf0\xcc\x99\xf4\x1a\x73\x85\x24\xb6\x50\x4c\xc6\xb4\x09\x92\xa5\x65\x45\x5d\xeb\x07\x6d\x53\xb2\xd4\x3c\x6e\xd9\x32\x5a\x32\x9a\x67\x56\xf3\x5d\xa3\xf1\xcc\xa1\x52\xc9\x74\xb1\xb4\x6a\xc2\x30\x66\xe1\xd7\x92\x6f\x27\xe8\xd6\x2a\x9c\xe4\x5d\xa3\x91\xde\x96\x1e\x86\x31\x46\x5c\x11\x94\x93\xd2\xf8\xa6\x40\x59\x28\x07\x50\x26\xd9\xbd\x90\x28\x69\x4b\x2b\x0a\xa0\x15\x91\xeb\xe7\x76\xab\xb2\xbc\xf7\x95\xf3\xb0\x10\x73\xbe\x95\x91\x75\x30\x17\x76\x56\x9a\x30\x21\xc4\x71\x5c\xcc\x6e\x9b\x8d\xfc\x5e\xa4\x28\x9c\xdf\x3f\xab\xa0\xc5\x43\x8e\x22\x92\x89\x26\xbc\xd5\x63\x15\x09\x60\x34\x2a\x65\xb1\x1c\xac\x09\xfb\xe9\x2d\x08\x16\x93\x08\x7e\xc4\x87\xea\xb7\x9c\x18\x46\xa3\x15\x5d\xec\x42\x76\x58\x72\xf2\x7c\x59\xe2\xdd\xc6\x80\x2b\x69\x57\x83\xdc\x14\xa5\xe6\x97\x46\xe3\x08\x74\x89\x2a\xe6\x87\x98\x4a\xcc\xab\xec\xa5\xff\x35\xb4\x51\xd6\xed\xe6\xbc\xfb\xe5\xe0\xa0\x5b\x5d\x80\x0e\x94\x5f\x9b\x50\xc4\x5b\x4e\x60\xd5\x7a\x39\x6c\x75\x44\xce\x7f\x96\x3b\x66\x8b\xad\x32\xd0\x2f\x4b\x2a\xdf\x25\xed\xc1\x3e\xcc\x66\x62\xf1\xc2\x03\x46\x8c\xc3\x72\x57\x67\xc3\xae\x1a\xcc\x66\xf7\xa8\xc2\xea\x1e\x4f\xbb\xb4\xc3\xb3\x36\xad\x78\xb5\x52\x32\xfe\x22\x07\x2f\xee\xf9\xab\x9b\x6e\x53\xcc\x96\xce\xb3\x9f\x3b\xcf\x43\xbe\xb1\xf3\xb9\x6f\xa3\xda\x77\xcb\x09\x76\xdd\x15\x1a\xd0\x98\xe7\x92\x87\xdc\xa1\x10\x03\xc1\x84\xe3\x51\xdb\xdc\xe6\x8d\xfb\x33\xfb\xc3\x3c\x69\x9e\x9e\x9e\x16\xc9\x37\xc2\x21\xe3\xfa\x9d\xdc\x7c\x79\x50\x5a\x10\x1c\xa8\xe5\x40\x29\x6f\x0f\x59\x1c\x55\x27\xee\x30\xe3\x42\x61\x4f\x19\xc9\x07\x16\x0d\x05\xa1\x1a\x69\xd1\x57\xdc\x4b\xf0\xbf\x28\xc6\x34\x3e\xfd\x12\x75\xc4\x78\xd2\x84\x10\xa5\x44\xa2\x98\xfc\x85\x2b\x93\xfe\xdb\x9f\x7f\xc5\x11\xaa\xa8\xd7\x6b\x33\x8a\x61\xad\xe5\x66\x5e\xc8\x17\x83\x8b\xee\x2d\xbd\x2d\xcc\x7b\xfc\x91\xe0\x1b\x20\x14\x1e\x7d\x3b\xde\xb2\x51\xa5\x0f\xdf\x4b\xbc\xd5\xe9\x37\xff\x79\x6c\xf3\xa3\xa2\x28\xbc\x86\xec\x3f\x13\xb2\x42\x72\x46\xc7\x2f\xa7\xda\xdf\x37\x9f\xcb\xf9\xa3\xd8\xf9\x6a\xd9\x39\x93\xdf\xc1\xeb\x2a\x1a\x86\xe2\xc9\xfc\xf0\xc9\xfd\x2d\xb4\x57\x3f\xfc\x77\xf8\x61\xde\x9a\x2e\x5c\xad\x35\x7c\x39\x33\x83\x5d\xad\xa3\x47\x4e\x5d\x6d\x3e\x1a\xf5\xc2\xc2\x6c\x8e\x3b\xa8\xa8\x05\xcb\x4d\xf4\xbc\x12\xbc\xb8\x67\xac\x70\xb4\x2b\xee\xf1\xa8\x46\x1f\x3d\x4a\xf7\x1f\xea\x2c\xab\x1d\xe6\xfd\xb3\x7d\x2f\xd4\x50\xce\xdb\xad\xb5\x9e\x32\xa3\x11\xe6\xaa\xfb\x2b\xbb\x53\x7e\x3a\x51\x35\x51\xbb\x97\x63\xbe\xad\x9a\x6e\xd9\xde\xad\x9e\x35\xa9\x34\xef\x6b\x57\xb8\x33\xd5\x78\xe7\x3c\x13\xa0\x35\xd9\x41\x9e\x76\x4e\x4f\x4f\x89\xe0\x87\x3a\xe2\xd7\xc0\xfa\xef\x6c\x73\x57\x97\x5b\x8b\x33\x7b\xcb\x05\xd7\x7c\xe8\x05\x96\x5c\xab\x27\x08\x5f\xbd\xf1\xdf\xe1\x8d\xaf\x8b\xae\xd7\x45\xd7\xeb\xa2\x6b\xd7\x9d\xe5\x75\xd1\xb5\x33\x2d\xdb\x26\x43\xb5\x6c\xbd\x1f\x77\xfc\x84\xad\xd0\x05\xc8\x72\xe4\xd9\x4f\x62\x94\x8e\x26\xad\x9c\x34\x59\x1a\xfa\xf0\xf0\xf0\xa1\x0d\xee\xf2\xce\xee\xfa\x96\xe4\x6e\x34\x0d\xbb\xd4\xbe\x3c\x67\xeb\x72\xb0\xb1\x75\xa9\xdc\x44\x7b\xcc\xe4\x2b\xbd\xcd\xbd\x73\x0d\xe5\x53\x58\xab\xe9\xaa\xfc\xf5\xf1\xf3\x39\xc4\xc1\x6a\xb6\xd2\x12\x6d\x9d\xaa\x30\x95\x30\x9c\x6e\xb7\x0f\xb7\x9e\x3b\xd6\xce\x3b\xdc\xcf\x0c\x2d\x3b\x22\xd7\xc7\xf9\xff\x46\x39\x4d\xec\x5a\x5b\xbb\xe1\x78\x5d\x2e\xe2\x32\x7f\xb5\xec\x21\x8b\xa6\x6a\x64\x22\x93\xf8\xd8\x30\xaa\xbf\xdf\x49\x33\x31\x61\xd7\x98\x7f\x87\xaf\x7b\xd7\x50\xfd\xf3\xdf\x83\x7d\x9f\xcf\xc1\xb6\xff\x1a\xec\xfb\x7d\x0c\xb6\x42\x73\x0b\x4d\x2e\x3f\xd1\x7d\xc2\x37\x7b\xff\x1f\x00\x00\xff\xff\xae\x05\x86\xad\xbb\x40\x00\x00")

func templateDefaultTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateDefaultTmpl,
		"template/default.tmpl",
	)
}

func templateDefaultTmpl() (*asset, error) {
	bytes, err := templateDefaultTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/default.tmpl", size: 16571, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/default.tmpl": templateDefaultTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"default.tmpl": &bintree{templateDefaultTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

